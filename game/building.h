#ifndef BUILDING_H
#define BUILDING_H

#include <QObject>
#include <QVector>

#include "oxygine-framework.h"
#include "game/smartpointers.h"
#include "coreengine/fileserializable.h"
#include "coreengine/scriptvariables.h"

class QmlVectorPoint;

class Building : public QObject, public oxygine::Actor, public FileSerializable
{
    Q_OBJECT
public:
    explicit Building(const QString& BuildingID);

    virtual ~Building() = default;
    /**
     * @brief init
     */
    void init();
    /**
     * @brief updateBuildingSprites updates all sprites of this building
     */
    void updateBuildingSprites();
    /**
     * @brief setTerrain
     * @param pTerrain smart pointer to the terrain this building is placed on
     */
    inline void setTerrain(Terrain* pTerrain)
    {
        m_pTerrain = pTerrain;
    }
    /**
     * @brief canBuildingBePlaced
     * @param terrainID
     * @return if the building can be placed on the given terrain
     */
    bool canBuildingBePlaced(Terrain* pTerrain);
    /**
     * @brief serialize stores the object
     * @param pStream
     */
    virtual void serialize(QDataStream& pStream) override;
    /**
     * @brief deserialize restores the object
     * @param pStream
     */
    virtual void deserialize(QDataStream& pStream) override;
    /**
     * @brief getVersion stream version for serialization
     * @return
     */
    inline virtual qint32 getVersion() override
    {
        return 3;
    }


signals:

public slots:
    /**
     * @brief setOwner changes the owner ship of this building
     * @param pOwner
     */
    void setOwner(Player* pOwner);
    /**
     * @brief getMinimapIcon
     * @return
     */
    QString getMinimapIcon();
    /**
     * @brief setUnitOwner the building gets owned by the owner of this unit
     * @param pUnit
     */
    void setUnitOwner(Unit* pUnit);
    /**
     * @brief loadSprite loads a sprite for this building
     * @param sprite the sprite id
     * @param addPlayerColor true for adding player color to the sprite
     */
    void loadSprite(QString sprite, bool addPlayerColor);
    /**
     * @brief getOwnerID
     * @return the player owner index of this building
     */
    qint32 getOwnerID();
    /**
     * @brief getOwner
     * @return the pointer to the owner of this building
     */
    Player* getOwner();
    /**
     * @brief getBuildingID
     * @return the string if of this building
     */
    inline QString getBuildingID()
    {
        return m_BuildingID;
    }
    /**
     * @brief getX
     * @return  x coordinates of this unit
     */
    qint32 getX() const;
    /**
     * @brief getY
     * @return  y coordinates of this unit
     */
    qint32 getY() const;

    qint32 getHp() const;
    void setHp(const qint32 &Hp);

    qint32 getFireCount() const;
    void setFireCount(const qint32 &value);
    /**
     * @brief getBaseIncome
     * @return base income generated by this building
     */
    quint32 getBaseIncome() const;
    /**
     * @brief getActionList
     * @return list of actions that can be performed by this building e.g building units.
     */
    QStringList getActionList();
    /**
     * @brief startOfTurn
     */
    void startOfTurn();
    /**
     * @brief getTerrain
     * @return
     */
    Terrain* getTerrain();
    /**
     * @brief getOffensiveBonus
     * @return
     */
    qint32 getOffensiveBonus();
    /**
     * @brief getDefensiveBonus
     * @return
     */
    qint32 getDefensiveBonus();
    /**
     * @brief getVariables
     * @return
     */
    inline ScriptVariables* getVariables()
    {
        return &m_Variables;
    }
    /**
     * @brief getVision
     * @return
     */
    qint32 getVisionBonus();
    /**
     * @brief getBuildingWidth
     * @return
     */
    qint32 getBuildingWidth();
    /**
     * @brief getBuildingHeigth
     * @return
     */
    qint32 getBuildingHeigth();
    /**
     * @brief getIsAttackable
     * @return
     */
    bool getIsAttackable(qint32 x, qint32 y);
    /**
     * @brief getActionTargetFields
     * @return
     */
    QmlVectorPoint* getActionTargetFields();
    /**
     * @brief getActionTargetOffset
     * @return
     */
    QPoint getActionTargetOffset();
    /**
     * @brief getTerrainAnimationBase
     * @return
     */
    QString getTerrainAnimationBase();
    /**
     * @brief getTerrainAnimationForeground
     * @return
     */
    QString getTerrainAnimationForeground();
    /**
     * @brief getTerrainAnimationBackground
     * @return
     */
    QString getTerrainAnimationBackground();
private:
    QVector<oxygine::spSprite> m_pBuildingSprites;
    /**
     * @brief m_BuildingID the id of this building
     */
    QString m_BuildingID;
    /**
     * @brief m_Owner our owner a nullptr means we're a neutral building
     */
    Player* m_pOwner{nullptr};
    /**
     * @brief m_Terrain the terrain at which we are placed
     */
    Terrain* m_pTerrain{nullptr};
    /**
     * @brief m_Hp
     */
    qint32 m_Hp{-1};
    /**
      *
      */
    qint32 fireCount{0};



    ScriptVariables m_Variables;
};

#endif // BUILDING_H
